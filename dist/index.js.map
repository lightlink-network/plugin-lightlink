{"version":3,"sources":["../src/actions/transfer.ts","../src/providers/wallet.ts","../src/lib/chains.ts","../src/lib/constants.ts","../src/templates/index.ts","../src/types/index.ts","../src/actions/swap.ts","../src/actions/search.ts","../src/actions/balance.ts","../src/index.ts"],"sourcesContent":["import { ByteArray, formatEther, parseEther, type Hex } from \"viem\";\nimport {\n    Action,\n    composeContext,\n    generateObjectDeprecated,\n    HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\n\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport type { Transaction, TransferParams } from \"../types\";\nimport { transferTemplate } from \"../templates\";\nimport { resolveEnsDomain } from \"@cryptokass/llx\";\n\n// Exported for tests\nexport class TransferAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<Transaction> {\n        console.log(\n            `Transferring: ${params.amount} tokens to (${params.toAddress} on ${params.fromChain})`\n        );\n\n        if (!params.data) {\n            params.data = \"0x\";\n        }\n\n        const toAddress: `0x${string}` = params.toAddress.startsWith(\"0x\")\n            ? (params.toAddress as `0x${string}`)\n            : await resolveEnsDomain(params.toAddress);\n\n        this.walletProvider.switchChain(params.fromChain);\n\n        const walletClient = this.walletProvider.getWalletClient(\n            params.fromChain\n        );\n\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: walletClient.account,\n                to: toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n                kzg: {\n                    blobToKzgCommitment: function (_: ByteArray): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                    computeBlobKzgProof: function (\n                        _blob: ByteArray,\n                        _commitment: ByteArray\n                    ): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                },\n                chain: undefined,\n            });\n\n            return {\n                hash,\n                from: walletClient.account.address,\n                to: toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n            };\n        } catch (error) {\n            throw new Error(`Transfer failed: ${error.message}`);\n        }\n    }\n}\n\nconst buildTransferDetails = async (\n    state: State,\n    runtime: IAgentRuntime,\n    wp: WalletProvider\n): Promise<TransferParams> => {\n    const chains = Object.keys(wp.chains);\n    state.supportedChains = chains.map((item) => `\"${item}\"`).join(\"|\");\n\n    const context = composeContext({\n        state,\n        template: transferTemplate,\n    });\n\n    const transferDetails = (await generateObjectDeprecated({\n        runtime,\n        context,\n        modelClass: ModelClass.SMALL,\n    })) as TransferParams;\n\n    const existingChain = wp.chains[transferDetails.fromChain];\n\n    if (!existingChain) {\n        throw new Error(\n            \"The chain \" +\n                transferDetails.fromChain +\n                \" not configured yet. Add the chain or choose one from configured: \" +\n                chains.toString()\n        );\n    }\n\n    return transferDetails;\n};\n\nexport const transferAction: Action = {\n    name: \"transfer\",\n    description: \"Transfer tokens between addresses on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: unknown,\n        callback?: HandlerCallback\n    ) => {\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        console.log(\"Transfer action handler called\");\n        const walletProvider = await initWalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n\n        // Compose transfer context\n        const paramOptions = await buildTransferDetails(\n            state,\n            runtime,\n            walletProvider\n        );\n\n        try {\n            const transferResp = await action.transfer(paramOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${paramOptions.amount} tokens to ${paramOptions.toAddress}\\nTransaction Hash: ${transferResp.hash}`,\n                    content: {\n                        success: true,\n                        hash: transferResp.hash,\n                        amount: formatEther(transferResp.value),\n                        recipient: transferResp.to,\n                        chain: paramOptions.fromChain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"assistant\",\n                content: {\n                    text: \"I'll help you transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n            {\n                user: \"user\",\n                content: {\n                    text: \"Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n        ],\n    ],\n    similes: [\"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","import {\n    createPublicClient,\n    createWalletClient,\n    formatUnits,\n    http,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport {\n    type IAgentRuntime,\n    type Provider,\n    type Memory,\n    type State,\n    type ICacheManager,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n} from \"viem\";\nimport { chains as lightlinkL2Chains } from \"../lib/chains\";\nimport NodeCache from \"node-cache\";\nimport * as path from \"path\";\n\nimport type { SupportedChain } from \"../types\";\n\nexport class WalletProvider {\n    private cache: NodeCache;\n    private cacheKey: string = \"evm/wallet\";\n    private currentChain: SupportedChain = \"lightlink\";\n    private CACHE_EXPIRY_SEC = 5;\n    chains: Record<string, Chain> = { lightlink: lightlinkL2Chains.lightlink };\n    account: PrivateKeyAccount;\n\n    constructor(\n        accountOrPrivateKey: PrivateKeyAccount | `0x${string}`,\n        private cacheManager: ICacheManager,\n        chains?: Record<string, Chain>\n    ) {\n        this.setAccount(accountOrPrivateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n\n        this.cache = new NodeCache({ stdTTL: this.CACHE_EXPIRY_SEC });\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        chainName = WalletProvider.validateName(chainName) as SupportedChain;\n\n        if (!this.chains[chainName]?.id) {\n            throw new Error(\"Invalid chain name:\" + chainName);\n        }\n\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = lightlinkL2Chains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name:\" + chainName);\n        }\n\n        return chain;\n    }\n\n    async getWalletBalance(): Promise<string | null> {\n        const cacheKey = \"walletBalance_\" + this.currentChain;\n        const cachedData = await this.getCachedData<string>(cacheKey);\n        if (cachedData) {\n            elizaLogger.log(\n                \"Returning cached wallet balance for chain: \" +\n                    this.currentChain\n            );\n            return cachedData;\n        }\n\n        try {\n            const client = this.getPublicClient(this.currentChain);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            const balanceFormatted = formatUnits(balance, 18);\n            this.setCachedData<string>(cacheKey, balanceFormatted);\n            elizaLogger.log(\n                \"Wallet balance cached for chain: \",\n                this.currentChain\n            );\n            return balanceFormatted;\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    async getWalletBalanceForChain(\n        chainName: SupportedChain\n    ): Promise<string | null> {\n        try {\n            const client = this.getPublicClient(chainName);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            return formatUnits(balance, 18);\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    addChain(chain: Record<string, Chain>) {\n        this.setChains(chain);\n    }\n\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\n        if (!this.chains[chainName]) {\n            const chain = WalletProvider.genChainFromName(\n                chainName,\n                customRpcUrl\n            );\n            this.addChain({ [chainName]: chain });\n        }\n        this.setCurrentChain(chainName);\n    }\n\n    private async readFromCache<T>(key: string): Promise<T | null> {\n        const cached = await this.cacheManager.get<T>(\n            path.join(this.cacheKey, key)\n        );\n        return cached;\n    }\n\n    private async writeToCache<T>(key: string, data: T): Promise<void> {\n        await this.cacheManager.set(path.join(this.cacheKey, key), data, {\n            expires: Date.now() + this.CACHE_EXPIRY_SEC * 1000,\n        });\n    }\n\n    private async getCachedData<T>(key: string): Promise<T | null> {\n        // Check in-memory cache first\n        const cachedData = this.cache.get<T>(key);\n        if (cachedData) {\n            return cachedData;\n        }\n\n        // Check file-based cache\n        const fileCachedData = await this.readFromCache<T>(key);\n        if (fileCachedData) {\n            // Populate in-memory cache\n            this.cache.set(key, fileCachedData);\n            return fileCachedData;\n        }\n\n        return null;\n    }\n\n    private async setCachedData<T>(cacheKey: string, data: T): Promise<void> {\n        // Set in-memory cache\n        this.cache.set(cacheKey, data);\n\n        // Write to file-based cache\n        await this.writeToCache(cacheKey, data);\n    }\n\n    private setAccount = (\n        accountOrPrivateKey: PrivateKeyAccount | `0x${string}`\n    ) => {\n        if (typeof accountOrPrivateKey === \"string\") {\n            this.account = privateKeyToAccount(accountOrPrivateKey);\n        } else {\n            this.account = accountOrPrivateKey;\n        }\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        Object.keys(chains).forEach((chain: string) => {\n            this.chains[chain] = chains[chain];\n        });\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static validateName(chainName: string): string {\n        if (chainName === \"phoenix\" || chainName === \"mainnet\") {\n            chainName = \"lightlink\";\n        }\n        if (chainName === \"pegasus\" || chainName === \"testnet\") {\n            chainName = \"lightlinkTestnet\";\n        }\n        if (chainName === \"eth\") {\n            chainName = \"ethereum\";\n        }\n\n        return chainName;\n    }\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        chainName = WalletProvider.validateName(chainName);\n        const baseChain = lightlinkL2Chains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name: \" + chainName);\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (_: IAgentRuntime): Record<string, Chain> => {\n    // const chainNames =\n    //     (runtime.character.settings.chains?.evm as SupportedChain[]) || [];\n    // const chains = {};\n\n    // chainNames.forEach((chainName) => {\n    //     const rpcUrl = runtime.getSetting(\n    //         \"ETHEREUM_PROVIDER_\" + chainName.toUpperCase()\n    //     );\n    //     const chain = WalletProvider.genChainFromName(chainName, rpcUrl);\n    //     chains[chainName] = chain;\n    // });\n\n    // const mainnet_rpcurl = runtime.getSetting(\"EVM_PROVIDER_URL\");\n    // if (mainnet_rpcurl) {\n    //     const chain = WalletProvider.genChainFromName(\n    //         \"mainnet\",\n    //         mainnet_rpcurl\n    //     );\n    //     chains[\"mainnet\"] = chain;\n    // }\n\n    // return chains;\n    return lightlinkL2Chains;\n};\n\nexport const initWalletProvider = async (runtime: IAgentRuntime) => {\n    const teeMode = runtime.getSetting(\"TEE_MODE\") || \"OFF\";\n\n    const chains = genChainsFromRuntime(runtime);\n\n    if (teeMode !== \"OFF\") {\n        throw new Error(\"TEE not supported\");\n    }\n    const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\") as `0x${string}`;\n    if (!privateKey) {\n        throw new Error(\"EVM_PRIVATE_KEY is missing\");\n    }\n    return new WalletProvider(privateKey, runtime.cacheManager, chains);\n};\n\nexport const evmWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = await initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getWalletBalance();\n            const chain = walletProvider.getCurrentChain();\n            const agentName = state?.agentName || \"The agent\";\n            return `${agentName}'s EVM Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in EVM wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","import { defineChain } from \"viem\";\nimport { mainnet, sepolia } from \"viem/chains\";\nimport { CONTRACTS } from \"./constants\";\n\nexport const lightlink = defineChain({\n    id: 1890,\n    name: \"Lightlink Phoenix\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Ether\",\n        symbol: \"ETH\",\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                process.env.LIGHTLINK_MAINNET_RPC_URL ||\n                    \"https://replicator-01.phoenix.lightlink.io/rpc/v1\",\n            ],\n            webSocket: [\n                process.env.LIGHTLINK_MAINNET_RPC_URL ||\n                    \"wss://replicator-01.phoenix.lightlink.io/rpc/v1\",\n            ],\n        },\n    },\n    blockExplorers: {\n        default: { name: \"Explorer\", url: \"https://phoenix.lightlink.io\" },\n    },\n    contracts: {\n        uniswapV3Factory: {\n            address: CONTRACTS.lightlink.UNISWAP_V3_FACTORY_ADDRESS,\n        },\n        universalRouter: {\n            address: CONTRACTS.lightlink.UNIVERSAL_ROUTER,\n        },\n        uniswapV3Quoter: {\n            address: CONTRACTS.lightlink.UNISWAP_V3_QUOTER_ADDRESS,\n        },\n    },\n});\n\nexport const lightlinkTestnet = defineChain({\n    id: 1891,\n    name: \"Lightlink Pegasus Testnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Ether\",\n        symbol: \"ETH\",\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                process.env.LIGHTLINK_TESTNET_RPC_URL ||\n                    \"https://replicator-01.pegasus.lightlink.io/rpc/v1\",\n            ],\n            webSocket: [\n                process.env.LIGHTLINK_TESTNET_RPC_URL ||\n                    \"wss://replicator-01.pegasus.lightlink.io/rpc/v1\",\n            ],\n        },\n    },\n    blockExplorers: {\n        default: { name: \"Explorer\", url: \"https://pegasus.lightlink.io\" },\n    },\n    contracts: {\n        uniswapV3Factory: {\n            address: CONTRACTS.lightlinkTestnet.UNISWAP_V3_FACTORY_ADDRESS,\n        },\n        universalRouter: {\n            address: CONTRACTS.lightlinkTestnet.UNIVERSAL_ROUTER,\n        },\n        uniswapV3Quoter: {\n            address: CONTRACTS.lightlinkTestnet.UNISWAP_V3_QUOTER_ADDRESS,\n        },\n    },\n});\n\nexport const chains = {\n    sepolia,\n    ethereum: mainnet,\n    lightlink: lightlink,\n    lightlinkTestnet: lightlinkTestnet,\n};\n","import { ByteArray } from \"viem\";\n\nexport const CONTRACTS = {\n    lightlink: {\n        UNIVERSAL_ROUTER: \"0x6B3ea22C757BbF9C78CcAaa2eD9562b57001720B\",\n        UNISWAP_V3_FACTORY_ADDRESS:\n            \"0xEE6099234bbdC793a43676D98Eb6B589ca7112D7\",\n        UNISWAP_V3_QUOTER_ADDRESS: \"0x243551e321Dac40508c22de2E00aBECF17F764b5\",\n    },\n\n    lightlinkTestnet: {\n        UNIVERSAL_ROUTER: \"0x742d315e929B188e3F05FbC49774474a627b0502\",\n        UNISWAP_V3_FACTORY_ADDRESS:\n            \"0x1F98431c8aD98523631AE4a59f267346364d5Db4\",\n        UNISWAP_V3_QUOTER_ADDRESS: \"0x0000000000000000000000000000000000000000\",\n    },\n};\n\nexport const blankKzg = () => ({\n    blobToKzgCommitment: function (_: ByteArray): ByteArray {\n        throw new Error(\"Function not implemented.\");\n    },\n    computeBlobKzgProof: function (\n        _blob: ByteArray,\n        _commitment: ByteArray\n    ): ByteArray {\n        throw new Error(\"Function not implemented.\");\n    },\n});\n","export const transferTemplate = `You are an AI assistant specialized in processing cryptocurrency transfer requests. Your task is to extract specific information from user messages and format it into a structured JSON response.\n\nFirst, review the recent messages from the conversation:\n\n<recent_messages>\n{{recentMessages}}\n</recent_messages>\n\nHere's a list of supported chains:\n<supported_chains>\n{{supportedChains}}\n</supported_chains>\n\nLightlink is a EVM compatible L2 blockchain. It supports hyperfast sub second transactions and ultra low (often free) gas fees.\nThe Lightlink network the mainnet might also be called Lightlink Phoenix and the testnet sometimes called Lightlink Pegasus.\n\nYour goal is to extract the following information about the requested transfer:\n1. Chain to execute on (must be one of the supported chains, if none is specified default to lightlink)\n2. Amount to transfer (in ETH, without the coin symbol)\n3. Recipient address (must be a valid Ethereum address or a valid ENS name)\n4. Token symbol or address (if not a native token transfer)\n\nBefore providing the final JSON output, show your reasoning process inside <analysis> tags. Follow these steps:\n\n1. Identify the relevant information from the user's message:\n   - Quote the part of the message mentioning the chain.\n   - Quote the part mentioning the amount.\n   - Quote the part mentioning the recipient address.\n   - Quote the part mentioning the token (if any).\n\n2. Validate each piece of information:\n   - Chain: List all supported chains and check if the mentioned chain is in the list.\n   - Amount: Attempt to convert the amount to a number to verify it's valid.\n   - Address: Check that it starts with \"0x\" and count the number of characters (should be 42).\n   - Token: Note whether it's a native transfer or if a specific token is mentioned.\n\n3. If any information is missing or invalid, prepare an appropriate error message.\n\n4. If all information is valid, summarize your findings.\n\n5. Prepare the JSON structure based on your analysis.\n\nAfter your analysis, provide the final output in a JSON markdown block. All fields except 'token' are required. The JSON should have this structure:\n\n\\`\\`\\`json\n{\n    \"fromChain\": string,\n    \"amount\": string,\n    \"toAddress\": string,\n    \"token\": string | null\n}\n\\`\\`\\`\n\nRemember:\n- The chain name must be a string and must exactly match one of the supported chains.\n- The amount should be a string representing the number without any currency symbol.\n- The recipient address must be a valid Ethereum address starting with \"0x\".\n- If no specific token is mentioned (i.e., it's a native token transfer), set the \"token\" field to null.\n\nNow, process the user's request and provide your response.\n`;\n\nexport const swapTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Input token symbol or address (the token being sold)\n- Output token symbol or address (the token being bought)\n- Amount to swap: Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\")\n- Chain to execute on (If none is specified default to lightlink)\n- Slippage: Must be a floating point number between 0 and 1. Where 0 is 0% and 1 is 100%.\n\nNote:\nLightlink is a EVM compatible L2 blockchain. It supports hyperfast sub second transactions and ultra low (often free) gas fees.\nThe Lightlink network the mainnet might also be called Lightlink Phoenix and the testnet sometimes called Lightlink Pegasus.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"inputToken\": string,\n    \"outputToken\": string,\n    \"amount\": string,\n    \"chain\": \"sepolia\" | \"ethereum\" | \"lightlink\" | \"lightlinkTestnet\",\n    \"slippage\": number\n}\n\\`\\`\\`\n`;\n\nexport const searchTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested search:\n- Query: The search query to be performed on the chain. For example the query could be an address, an ENS name, a token symbol, A contract name, or a transaction hash.\n- Chain: The chain to execute on (If none is specified default to lightlink)\n\nFor example the query could be an address, a token symbol, or a transaction hash. You might use\nsearch to fund the address of a token, or locate a smart contract.\n\nNote:\nLightlink is a EVM compatible L2 blockchain. It supports hyperfast sub second transactions and ultra low (often free) gas fees.\nThe Lightlink network the mainnet might also be called Lightlink Phoenix and the testnet sometimes called Lightlink Pegasus.\nSearching on Lightlink is only supported on the Lightlink network.\n\nRespond with a JSON markdown block containing only the extracted values. If you dont know the network, default to lightlink.\n\n\\`\\`\\`json\n{\n    \"query\": string,\n    \"chain\": \"lightlink\" | \"lightlinkTestnet\"\n}\n\\`\\`\\`\n`;\n\nexport const balanceTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\n<supported_chains>\n\"sepolia\" | \"ethereum\" | \"lightlink\" | \"lightlinkTestnet\"\n</supported_chains>\n\nExtract the following information about the requested balance query:\n- Address: The address to get the balance of\n- Token: The address of the token to get the balance for (if none is specified default to ETH)\n- Chain: The chain to fetch the balance on (If none is specified default to \"lightlink\")\n\nFor example the query could be an address, a token symbol, or a transaction hash. You might use\nsearch to fund the address of a token, or locate a smart contract.\n\nNote:\nLightlink is a EVM compatible L2 blockchain. It supports hyperfast sub second transactions and ultra low (often free) gas fees.\nThe Lightlink mainnet might also be called Lightlink Phoenix and the testnet sometimes called Lightlink Pegasus.\n\nRespond with a JSON markdown block containing only the extracted values. If you dont know the network, default to lightlink.\nIf you are getting the native balance aka ETH, set the token to null.\n\nThe chain variable must be one of the supported chains. e.g. \"lightlink\", \"lightlinkTestnet\", \"sepolia\" or \"ethereum\"\n\n\\`\\`\\`json\n{\n    \"address\": string,\n    \"token\": string | null,\n    \"chain\": \"sepolia\" | \"ethereum\" | \"lightlink\" | \"lightlinkTestnet\"\n}\n\\`\\`\\`\n`;\n","import type { Token } from \"@lifi/types\";\nimport type {\n    Account,\n    Address,\n    Chain,\n    Hash,\n    HttpTransport,\n    PublicClient,\n    WalletClient,\n} from \"viem\";\n// import * as viemChains from \"viem/chains\";\n\nimport { chains as lightlinkL2Chains } from \"../lib/chains\";\n\n// const _SupportedChainList = Object.keys(viemChains) as Array<\n//     keyof typeof viemChains\n// >;\n\nconst _SupportedChainList = Object.keys(lightlinkL2Chains) as Array<\n    keyof typeof lightlinkL2Chains\n>;\n\nexport type SupportedChain = (typeof _SupportedChainList)[number];\n\n// Transaction types\nexport interface Transaction {\n    hash: Hash;\n    from: Address;\n    to: Address;\n    value: bigint;\n    data?: `0x${string}`;\n    chainId?: number;\n}\n\nexport type SwapStep = {\n    txHash: string;\n    description?: string;\n};\n\nexport interface SwapTransaction {\n    hash: Hash;\n    fromToken: Address;\n    toToken: Address;\n    amountIn: bigint;\n    minAmountOut: bigint;\n    recipient: Address;\n    steps: SwapStep[];\n}\n\n// Token types\nexport interface TokenWithBalance {\n    token: Token;\n    balance: bigint;\n    formattedBalance: string;\n    priceUSD: string;\n    valueUSD: string;\n}\n\nexport interface WalletBalance {\n    chain: SupportedChain;\n    address: Address;\n    totalValueUSD: string;\n    tokens: TokenWithBalance[];\n}\n\n// Chain configuration\nexport interface ChainMetadata {\n    chainId: number;\n    name: string;\n    chain: Chain;\n    rpcUrl: string;\n    nativeCurrency: {\n        name: string;\n        symbol: string;\n        decimals: number;\n    };\n    blockExplorerUrl: string;\n}\n\nexport interface ChainConfig {\n    chain: Chain;\n    publicClient: PublicClient<HttpTransport, Chain, Account | undefined>;\n    walletClient?: WalletClient;\n}\n\n// Action parameters\nexport interface TransferParams {\n    fromChain: SupportedChain;\n    toAddress: string;\n    amount: string;\n    data?: `0x${string}`;\n}\n\nexport interface SwapParams {\n    chain: SupportedChain;\n    fromToken: Address;\n    toToken: Address;\n    amount: string;\n    slippage?: number;\n}\n\nexport interface BridgeParams {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    fromToken: Address;\n    toToken: Address;\n    amount: string;\n    toAddress?: Address;\n}\n\nexport interface SearchParams {\n    chain: SupportedChain;\n    query: string;\n}\n\nexport interface SearchResult {\n    result: string;\n}\n\nexport interface BalanceParams {\n    chain: SupportedChain;\n    address: Address;\n    token: Address | null;\n}\n\nexport interface BalanceResult {\n    balance: string;\n    formattedBalance: string;\n}\n\n// Plugin configuration\nexport interface EvmPluginConfig {\n    rpcUrl?: {\n        ethereum?: string;\n        sepolia?: string;\n        lightlink?: string;\n        lightlinkTestnet?: string;\n    };\n    secrets?: {\n        EVM_PRIVATE_KEY: string;\n    };\n    testMode?: boolean;\n    multicall?: {\n        batchSize?: number;\n        wait?: number;\n    };\n}\n\n// LiFi types\nexport type LiFiStatus = {\n    status: \"PENDING\" | \"DONE\" | \"FAILED\";\n    substatus?: string;\n    error?: Error;\n};\n\nexport type LiFiRoute = {\n    transactionHash: Hash;\n    transactionData: `0x${string}`;\n    toAddress: Address;\n    status: LiFiStatus;\n};\n\n// Provider types\nexport interface TokenData extends Token {\n    symbol: string;\n    decimals: number;\n    address: Address;\n    name: string;\n    logoURI?: string;\n    chainId: number;\n}\n\nexport interface TokenPriceResponse {\n    priceUSD: string;\n    token: TokenData;\n}\n\nexport interface TokenListResponse {\n    tokens: TokenData[];\n}\n\nexport interface ProviderError extends Error {\n    code?: number;\n    data?: unknown;\n}\n","import type {\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n} from \"@elizaos/core\";\nimport {\n    composeContext,\n    generateObjectDeprecated,\n    ModelClass,\n} from \"@elizaos/core\";\n\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport { swapTemplate } from \"../templates\";\nimport type { SwapParams, SwapStep, SwapTransaction } from \"../types\";\nimport { elektrik, fetchTokenDecimals } from \"@cryptokass/llx\";\nimport { blankKzg } from \"../lib/constants\";\nimport { type Hex, parseUnits } from \"viem\";\n\nexport { swapTemplate };\n\nexport class SwapAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async swap(params: SwapParams): Promise<SwapTransaction> {\n        this.walletProvider.switchChain(params.chain);\n\n        const publicClient = this.walletProvider.getPublicClient(params.chain);\n        const walletClient = this.walletProvider.getWalletClient(params.chain);\n        const chain = this.walletProvider.getChainConfigs(params.chain);\n        const [fromAddress] = await walletClient.getAddresses();\n\n        // 0. get input token info\n        const inputDecimals = await fetchTokenDecimals(\n            chain.id,\n            params.fromToken\n        );\n        const amountIn = parseUnits(params.amount, inputDecimals);\n\n        // 1. Get the quote\n        const quote = await elektrik.quoteExactInput(chain.id, {\n            fromToken: params.fromToken,\n            toToken: params.toToken,\n            amountIn,\n            fee: 3000,\n        });\n\n        // 2. prepare the swap\n        const txs = await elektrik.swapExactInput(chain.id, fromAddress, {\n            tokenIn: params.fromToken,\n            tokenOut: params.toToken,\n            amountIn: amountIn,\n            amountOut: quote.amountOut,\n            slippage: params.slippage || 0.05,\n            fee: 3000,\n        });\n\n        // 3. execute the swap\n        const actions: SwapStep[] = [];\n        for (const tx of txs) {\n            const hash = await walletClient.sendTransaction({\n                chain: chain,\n                account: walletClient.account,\n                kzg: blankKzg(),\n                ...tx,\n            });\n            await publicClient.waitForTransactionReceipt({ hash });\n            actions.push({\n                txHash: hash,\n                description: `Swap:` + tx.description,\n            });\n        }\n\n        // 4. get the receipt\n        const receipt = await publicClient.waitForTransactionReceipt({\n            hash: actions[actions.length - 1].txHash as Hex,\n        });\n\n        if (!receipt?.status || receipt!.status === \"reverted\") {\n            throw new Error(\"Transaction failed\");\n        }\n\n        // 5. return the swap info\n        return {\n            hash: receipt.transactionHash,\n            fromToken: params.fromToken,\n            toToken: params.toToken,\n            amountIn: amountIn,\n            minAmountOut: quote.amountOut,\n            recipient: fromAddress,\n            steps: actions,\n        };\n    }\n}\n\nexport const swapAction = {\n    name: \"swap\",\n    description: \"Swap tokens on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: unknown,\n        callback?: HandlerCallback\n    ) => {\n        console.log(\"Swap action handler called\");\n        const walletProvider = await initWalletProvider(runtime);\n        const action = new SwapAction(walletProvider);\n\n        // Compose swap context\n        const swapContext = composeContext({\n            state,\n            template: swapTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const swapOptions: SwapParams = {\n            chain: content.chain,\n            fromToken: content.inputToken,\n            toToken: content.outputToken,\n            amount: content.amount,\n            slippage: content.slippage,\n        };\n\n        try {\n            const swapResp = await action.swap(swapOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully swap ${swapOptions.amount} ${swapOptions.fromToken} tokens to ${swapOptions.toToken}\\nTransaction Hash: ${swapResp.hash}`,\n                    content: {\n                        success: true,\n                        hash: swapResp.hash,\n                        recipient: swapResp.recipient,\n                        chain: content.chain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error in swap handler:\", error.message);\n            if (callback) {\n                callback({ text: `Error: ${error.message}` });\n            }\n            return false;\n        }\n    },\n    template: swapTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Swap 1 ETH for USDC on Lightlink\",\n                    action: \"TOKEN_SWAP\",\n                },\n            },\n        ],\n    ],\n    similes: [\"TOKEN_SWAP\", \"EXCHANGE_TOKENS\", \"TRADE_TOKENS\"],\n}; // TODO: add more examples\n","import { search } from \"@cryptokass/llx\";\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport { SearchParams, SearchResult } from \"../types\";\nimport {\n    composeContext,\n    generateObjectDeprecated,\n    ModelClass,\n} from \"@elizaos/core\";\nimport { HandlerCallback, IAgentRuntime, Memory, State } from \"@elizaos/core\";\nimport { searchTemplate } from \"../templates\";\n\nexport class SearchAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async search(params: SearchParams): Promise<SearchResult> {\n        const publicClient = this.walletProvider.getPublicClient(params.chain);\n\n        if (params.chain != \"lightlink\" && params.chain != \"lightlinkTestnet\") {\n            throw new Error(\"Chain not supported\");\n        }\n\n        const results = await search(publicClient.chain.id, params.query);\n\n        return {\n            result: JSON.stringify(results, null, 2),\n        };\n    }\n}\n\nexport const searchAction = {\n    name: \"search\",\n    description:\n        \"Search block explorer for a specific address, token, or transaction\",\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: unknown,\n        callback?: HandlerCallback\n    ) => {\n        console.log(\"Search action handler called\");\n        const walletProvider = await initWalletProvider(runtime);\n        const action = new SearchAction(walletProvider);\n\n        // Compose swap context\n        const swapContext = composeContext({\n            state,\n            template: searchTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const searchOptions: SearchParams = {\n            chain: content.chain,\n            query: content.query,\n        };\n\n        try {\n            const searchResp = await action.search(searchOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully searched for ${searchOptions.query} on ${searchOptions.chain}\\nResults: ${searchResp.result}`,\n                    content: {\n                        success: true,\n                        chain: content.chain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error in swap handler:\", error.message);\n            if (callback) {\n                callback({ text: `Error: ${error.message}` });\n            }\n            return false;\n        }\n    },\n    template: searchTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Search for the address of USDC on Lightlink\",\n                    action: \"SEARCH_BLOCKCHAIN\",\n                },\n            },\n        ],\n    ],\n    similes: [\"SEARCH_BLOCKCHAIN\", \"SEARCH_ADDRESS\", \"SEARCH_TOKEN\"],\n}; // TODO: add more examples\n","import { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport { BalanceParams, BalanceResult } from \"../types\";\nimport {\n    composeContext,\n    generateObjectDeprecated,\n    ModelClass,\n} from \"@elizaos/core\";\nimport { HandlerCallback, IAgentRuntime, Memory, State } from \"@elizaos/core\";\nimport { balanceTemplate } from \"../templates\";\nimport { erc20Abi, formatEther, formatUnits } from \"viem\";\n\nexport class BalanceAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async balance(params: BalanceParams): Promise<BalanceResult> {\n        const publicClient = this.walletProvider.getPublicClient(params.chain);\n\n        // if token is null, get the balance of the address on the chain\n        if (params.token === null) {\n            const balance = await publicClient.getBalance({\n                address: params.address,\n            });\n            return {\n                balance: balance.toString(),\n                formattedBalance: formatEther(balance),\n            };\n        }\n\n        // otherwise, use the wallet provider to get the balance of the token\n        const balance = await publicClient.readContract({\n            address: params.token,\n            abi: erc20Abi,\n            functionName: \"balanceOf\",\n            args: [params.address],\n        });\n        const decimals = await publicClient.readContract({\n            address: params.token,\n            abi: erc20Abi,\n            functionName: \"decimals\",\n        });\n\n        return {\n            balance: balance.toString(),\n            formattedBalance: formatUnits(balance, decimals),\n        };\n    }\n}\n\nexport const balanceAction = {\n    name: \"balance\",\n    description: \"Get the balance for an address and a specific token\",\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: unknown,\n        callback?: HandlerCallback\n    ) => {\n        console.log(\"Balance action handler called\");\n        const walletProvider = await initWalletProvider(runtime);\n        const action = new BalanceAction(walletProvider);\n\n        // Compose swap context\n        const balanceContext = composeContext({\n            state,\n            template: balanceTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: balanceContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const balanceOptions: BalanceParams = {\n            chain: content.chain,\n            address: content.address,\n            token: content.token,\n        };\n\n        try {\n            const balanceResp = await action.balance(balanceOptions);\n            if (callback) {\n                callback({\n                    text:\n                        `Successfully got the balance for ${balanceOptions.address}` +\n                        `\\nToken: ${balanceOptions.token ?? \"ETH\"}` +\n                        `\\nChain: ${balanceOptions.chain}` +\n                        `\\nBalance: ${balanceResp.formattedBalance} (${balanceResp.balance} Units)`,\n                    content: {\n                        success: true,\n                        chain: content.chain,\n                        token: balanceOptions.token ?? \"ETH\",\n                        balance: balanceResp.balance,\n                        formattedBalance: balanceResp.formattedBalance,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error in balance handler:\", error.message);\n            if (callback) {\n                callback({ text: `Error: ${error.message}` });\n            }\n            return false;\n        }\n    },\n    template: balanceTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Get the balance of 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on Base\",\n                    action: \"GET_BALANCE\",\n                },\n            },\n        ],\n    ],\n    similes: [\"GET_BALANCE\", \"GET_TOKEN_BALANCE\"],\n}; // TODO: add more examples\n","export * from \"./actions/transfer\";\nexport * from \"./providers/wallet\";\nexport * from \"./types\";\n\nimport type { Plugin } from \"@elizaos/core\";\nimport { transferAction } from \"./actions/transfer\";\nimport { swapAction } from \"./actions/swap\";\nimport { evmWalletProvider } from \"./providers/wallet\";\nimport { searchAction } from \"./actions/search\";\nimport { balanceAction } from \"./actions/balance\";\n\nexport const lightlinkPlugin: Plugin = {\n    name: \"lightlink\",\n    description: \"Lightlink blockchain integration plugin\",\n    providers: [evmWalletProvider],\n    evaluators: [],\n    services: [],\n    actions: [transferAction, swapAction, searchAction, balanceAction],\n};\n\nexport default lightlinkPlugin;\n"],"mappings":"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","names":["chains","chains","composeContext","generateObjectDeprecated","ModelClass","composeContext","generateObjectDeprecated","ModelClass","composeContext","generateObjectDeprecated","ModelClass","composeContext","generateObjectDeprecated","ModelClass","composeContext","generateObjectDeprecated","ModelClass","formatEther","formatUnits","balance","composeContext","generateObjectDeprecated","ModelClass"]}